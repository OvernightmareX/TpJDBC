package org.example.exo3.controllers;import jakarta.persistence.EntityManager;import jakarta.persistence.EntityManagerFactory;import jakarta.persistence.Persistence;import org.example.exo3.constants.TypeCRUD;import org.example.exo3.entity.Client;import org.example.exo3.entity.Event;import org.example.exo3.service.ClientService;import org.example.exo3.service.EventService;import org.example.exo3.service.TicketService;import java.sql.SQLException;import java.time.LocalDate;import java.util.InputMismatchException;import java.util.Scanner;import static org.example.exo3.constants.Constants.*;public class TicketingIHM {    public static void StartTicketManager() throws SQLException {        int userChoice;        EntityManagerFactory emf = Persistence.createEntityManagerFactory("jpa");        EntityManager em;        do {            displayMainMenu();            System.out.println("Your choice : ");            userChoice = userIntInput(0, MAX_MAIN_MENU_CHOICE);            em = emf.createEntityManager();            switch (userChoice) {                case 1 -> TicketService.ticketOrdering(em);                case 2 -> EventService.displayEventTicketOrdered(em);                case 3 -> ClientService.displayManageClient(em);                case 4 -> EventService.displayManageEvent(em);            }            em.close();        } while (userChoice != 0);        emf.close();        System.out.println("Thanks for using our program ! ");    }    public static void displayMainMenu() {        System.out.println("\n=== Ticket manager ===\n");        System.out.println("1. Order a ticket");        System.out.println("2. Display event's tickets");        System.out.println("3. Manage clients");        System.out.println("4. Manage events");        System.out.println("0. Quit");    }    public static void displayClientModificationMenu(Client clt){        System.out.println("\n1. Name : " + clt.getName());        System.out.println("2. Lastname : " + clt.getLastName());        System.out.println("3. Age : " + clt.getAge());        System.out.println("4. Phone : " + clt.getPhoneNumber());        System.out.println("5. Address : " + clt.getAddress().getRoad() +", " + clt.getAddress().getTown());        System.out.println("0. Stop modifications\n");    }    public static void displayEventModificationMenu(Event event){        System.out.println("\n1. Name : " + event.getName());        System.out.println("2. Date : " + event.getDate());        System.out.println("3. Time : " + event.getTime());        System.out.println("4. Number of place : " + event.getNumberOfPlace());        System.out.println("5. Address : " + event.getAddress().getRoad() +", " + event.getAddress().getTown());        System.out.println("0. Stop modifications\n");    }    public static int displayCRUDMenu(TypeCRUD type){        switch (type){            case EVENT -> System.out.println("\n=== Event manager ===\n");            case CLIENT -> System.out.println("\n=== Client manager ===\n");        }        System.out.println("1. Create");        System.out.println("2. Display");        System.out.println("3. Modification");        System.out.println("4. Delete");        System.out.println("0. Quit\n");        System.out.println("Your choice :");        return userIntInput(0,4);    }    public static String userStringInput() {        Scanner sc = new Scanner(System.in);        String name = sc.nextLine();        return name.trim();    }    public static LocalDate userDateInput() {        int day;        int month;        int year;        System.out.print("Please enter the day of arrival : ");        day = userIntInput(MIN_DAY_DATE, MAX_DAY_DATE);        System.out.print("Please enter the month of arrival : ");        month = userIntInput(MIN_MONTH_DATE, MAX_MONTH_DATE);        System.out.print("Please enter the year of arrival : ");        year = userIntInput(MIN_YEAR_DATE, MAX_YEAR_DATE);        return LocalDate.of(year, month, day);    }    public static int userIntInput(int minChoice, int maxChoice) {        int inputChoice;        Scanner sc = new Scanner(System.in);        do {            try {                inputChoice = sc.nextInt();                if (inputChoice < minChoice || inputChoice > maxChoice) throw new IllegalArgumentException();                break;            } catch (InputMismatchException e) {                System.out.println("Not an integer.");            } catch (IllegalArgumentException e) {                System.out.println("Not a correct answer.");                System.out.println("(The input must be between " + minChoice + " and " + maxChoice + ")");            }        } while (true);        return inputChoice;    }}